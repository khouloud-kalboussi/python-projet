#importer la biblioth
import pandas as pd 
import matplotlib.pyplot as plt

#importer des donnees
titanicData = pd.read_csv("Yahoo-Finance.csv", encoding="UTF-8")
titanicData

#Le code titanicData.isnull().sum() en Pandas est utilisé pour compter le nombre de valeurs manquantes (NaN ou valeurs nulles) dans chaque colonne du DataFrame titanicData.
print(titanicData.isnull().sum())

#La commande titanicData['Open'].head(50).isnull() en Pandas est utilisée pour vérifier la présence de valeurs manquantes (NaN ou valeurs nulles) dans les 50 premières lignes de la colonne 'Open' du DataFrame titanicData.
print(titanicData['Open'].head(50).isnull())

#vous avez filtré les données du DataFrame titanicData pour ne conserver que les lignes où la valeur dans la colonne 'Volume' est supérieure à 20000. Ensuite, en utilisant titanicData.head(50), vous affichez les 50 premières lignes de ce DataFrame filtré.
titanicData = titanicData[titanicData['Volume'] > 20000]
titanicData.head(50)

###
df = pd.DataFrame(titanicData)
titanicData = df.sort_values(by='Low', ascending=True) 
print(df)

###tri asc
titanicData = pd.DataFrame(titanicData).sort_values(by='Date', ascending=True) 
titanicData.head(100)

###tri desc
titanicData = pd.DataFrame(titanicData).sort_values(by='Date', ascending=False) 
titanicData.head(100)

###groupeBy

grouped_data = titanicData.groupby('Close')
# Afficher les premières lignes de chaque groupe après le groupby
for close_value, group in grouped_data:
    print(f"Valeur 'Close': {close_value}")
    print(group.head())  # Afficher les premières lignes de chaque groupe
    print("-----------------------------------")


###2. Analyse et Visualisation : a/

# Calcul des statistiques descriptives avec Pandas
close_column = titanicData['Close']

# Moyenne
mean_close = close_column.mean()

# Médiane
median_close = close_column.median()

# Écart-type
std_dev_close = close_column.std()

# Affichage des résultats
print(f"Moyenne : {mean_close}")
print(f"Médiane : {median_close}")
print(f"Écart-type : {std_dev_close}")

****

import matplotlib.pyplot as plt

# Création d'un histogramme pour la colonne 'Close'
titanicData['Close'].plot(kind='hist', bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Valeurs de Close')
plt.ylabel('Fréquence')
plt.title('Distribution des valeurs de Close')
plt.show()


###2. Analyse et Visualisation : b/

Graphique de ligne pour illustrer les tendances du marché :


# Supposons que 'financial_data' est votre DataFrame avec une colonne 'Date' et une colonne 'Prix'
plt.figure(figsize=(10, 6))
plt.plot(financial_data['Date'], financial_data['Prix'], marker='o', linestyle='-')
plt.xlabel('Date')
plt.ylabel('Prix')
plt.title('Évolution des prix au fil du temps')
plt.grid(True)
plt.show()

Graphique en barres pour comparer les performances d'actifs :


import seaborn as sns

# Supposons que 'titanicData' est votre DataFrame avec une colonne 'Low' et une colonne 'Close'
plt.figure(figsize=(8, 6))
sns.barplot(x='Low', y='Close', data=titanicData, palette='viridis')
plt.xlabel('Low')
plt.ylabel('Close')
plt.title('Comparaison des Closes des différents Lows')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

Diagramme à secteurs pour la répartition des actifs :

plt.figure(figsize=(8, 8))
plt.pie(titanicData['Close'], labels=titanicData['Low'], autopct='%1.1f%%', startangle=140)
plt.axis('equal')  # Pour que le diagramme soit un cercle plutôt qu'une ellipse
plt.title('Répartition des Close par Low')
plt.show()


###3. Prise de Décision : a/


# Supposons que 'titanicData' est votre DataFrame avec une colonne 'Volume'

# Vérifier si le prix est inférieur à 100 pour recommander l'investissement
prix_seuil = 100000
investir = titanicData['Volume'] < prix_seuil

# Afficher les recommandations d'investissement
recommandations = titanicData.loc[investir]
print(recommandations)


###3. Prise de Décision : b/

Pour justifier les décisions prises en se basant sur l'analyse des données dans le cadre d'un projet financier, il est essentiel de détailler les raisons et les conclusions tirées de cette analyse. Voici une approche pour justifier ces décisions :

1. Contextualisation des décisions :
Objectifs et critères d'investissement : Présentez clairement les objectifs spécifiques visés par l'analyse des données, ainsi que les critères ou les indicateurs utilisés pour prendre des décisions d'investissement.
2. Analyse des données :
Analyse descriptive : Fournissez une analyse descriptive détaillée des données utilisées pour l'investissement. Incluez des statistiques descriptives, des visualisations et des tendances clés pour soutenir vos décisions.
3. Explication des choix :
Corrélations et tendances : Mettez en évidence les corrélations ou les tendances découvertes dans les données. Expliquez comment ces éléments influencent les décisions prises.
Analyse comparative : Si des comparaisons entre différents actifs ou périodes ont été réalisées, justifiez les conclusions basées sur ces comparaisons.
4. Prise de décision :
Impact sur les recommandations : Expliquez comment les résultats de l'analyse des données ont contribué à la formulation des recommandations ou des décisions d'investissement.
Raisonnement logique : Décrivez le raisonnement logique derrière chaque décision, en détaillant comment les conclusions de l'analyse des données ont guidé ces choix.
5. Transparence et fiabilité :
Sources et méthodologies : Documentez les sources de données utilisées ainsi que les méthodologies analytiques employées. Assurez-vous que ces sources et méthodes sont fiables et précises.
Limitations et incertitudes : Indiquez clairement les limitations potentielles des données ou des méthodes utilisées, ainsi que toute incertitude dans les conclusions tirées.
6. Rétroaction et vérification :
Révision et ajustement : Montrez une disposition à réviser les décisions prises si de nouvelles informations ou des changements dans les tendances sont identifiés ultérieurement.




